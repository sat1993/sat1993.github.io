<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用户配置与ssh秘钥登陆]]></title>
    <url>%2F2018%2F01%2F11%2Fcentos7-user-config%2F</url>
    <content type="text"><![CDATA[添加用户1234添加用户~ useradd lixiaozhu设置密码，用户没有密码无法登陆。~ passwd lixiaozhu 参考文章：http://blog.csdn.net/boybruce/article/details/17198601 设置秘钥登陆配置好公私钥之后，还需要修改ssh配置，从密码登陆修改为秘钥登陆。123456789101112切换为root用户~ su -~ vi /etc/config/sshd_config在文件中添加3行内容RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys重启sshd服务~ systemctl restart sshd开放22端口~ firewall-cmd --zone=public --permanent --add-port=22/tcp &amp;&amp; firewall-cmd --reload 设置好sshd服务之后，配置用户秘钥信息.12345678910111213切换用户~ su lixiaozhu &amp;&amp; cd ~创建.ssh目录，并修改目录权限~ mkdir .ssh &amp;&amp; chmod 700 .ssh通过连接端生成秘钥，并scp公钥到服务器~ ssh-keygen -t rsa通过密码传输文件~ scp lxz.pub lixiaozhu@192.168.1.107:~/.ssh/到服务端修改文件权限~ cat ~/.ssh/lxz.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys~ rm ~/.ssh/lxz.pub连接端连接服务器~ ssh -i lxz lixiaozhu@192.168.1.107 ssh只需要保证服务端authorized_keys文件记录秘钥的公钥，客户端记录私钥即可秘钥登陆。]]></content>
      <categories>
        <category>centos7</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7使用nfs做网络共享]]></title>
    <url>%2F2018%2F01%2F11%2Fcentos7-nfs%2F</url>
    <content type="text"><![CDATA[nfsNFS(Network File System)即网络文件系统，它允许网络中的计算机之间通过TCP/IP网络共享资源。 本地可以通关挂载nfs共享，达到在本地直接打开小电影的效果。通过aria2下载电影到挂载的移动硬盘。再通过nfs直接分享，可以直接在本地打开视频文件。适用于centos7 1708版本(其他centos7版本也使用) nfs工作流程1、由程序在NFS客户端发起存取文件的请求，客户端本地的RPC(rpcbind)服务会通过网络向NFS服务端的RPC的111端口发出文件存取功能的请求。` 2、NFS服务端的RPC找到对应已注册的NFS端口，通知客户端RPC服务。 3、客户端获取正确的端口，并与NFS daemon联机存取数据。 4、存取数据成功后，返回前端访问程序，完成一次存取操作。 nfs服务安装安装rpcbind、nfs-utils~ yum install rpcbind nfs-utils 暂时不要启动nfs、rpcbind服务，需要先固定好nfs服务端口，避免重启电脑。 固定nfs服务端口nfs服务端口主要有 nfs 2049、portmapper111、mountd 892、rpc.statd662、 nlockmgr 32803、32769 具体配置： 修改/etc/sysconfig/nfs文件： 1234567# Port rpc.mountd should listen on.MOUNTD_PORT=892## Optional arguments passed to rpc.statd. See rpc.statd(8)STATDARG=&quot;&quot;# Port rpc.statd should listen on.STATD_PORT=662 修改 /etc/modprobe.d/lockd.conf 1234567# Set the TCP port that the NFS lock manager should use.# port must be a valid TCP port value (1-65535).options lockd nlm_tcpport=32803## Set the UDP port that the NFS lock manager should use.# port must be a valid UDP port value (1-65535).options lockd nlm_udpport=32769 启动nfs服务通过systemctl启动rpcbind、nfs：1234# 启动rpcbind~ systemctl start rpcbind# 启动nfs~ systemctl start nfs 通过firewall配置防火墙编辑firewalld中的nfs服务的防火墙配置文件：~ cp /usr/lib/firewalld/services/nfs.xml /etc/firewalld/services 添加固定的端口到/etc/firewalld/services/nfs.xml配置文件中： 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;service&gt; &lt;short&gt;NFS4&lt;/short&gt; &lt;description&gt;The NFS4 protocol is used to share files via TCP networking. You will need to have the NFS tools installed and properly configure your NFS server for this option to be useful.&lt;/description&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;111&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;662&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;892&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;2049&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;32803&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;111&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;662&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;892&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;2049&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;32769&quot;/&gt;&lt;/service&gt; 开启防火墙配置：1234# service名字需要与/etc/firewalld/services中的文件名匹配~ firewall-cmd --permanent --zone=public --add-service=nfs# 重新加载防火墙~ firewall-cmd --reload 开放nfs共享{local_dir} {ip_address}({param1},{param2}) 客户端地址2(参数1,参数2,...) 说明： 123456789101112131415161718local_dir: 本地需要共享的目录绝对路径。ip_address: 支持ip、x.x.x.0/24子网地址、域名、*.bakka.site子域名、*所有param1,param2:rw(该目录分享的权限是可擦写(read-write)，可通过客户端删除、编辑、添加文件)ro(只读(read-only))sync(sync 代表数据会同步写入到内存与硬盘中)async(async 则代表数据会先暂存于内存当中，而非直接写入硬盘)no_root_squash(客户机用root访问该共享文件夹时，不映射root用户)root_squash(客户机用root用户访问该共享文件夹时，将root用户映射成匿名用户)all_squash(客户机上的任何用户访问该共享目录时都映射成匿名用户)anonuid(将客户机上的用户映射成指定的本地用户ID的用户)anongid(将客户机上的用户映射成属于指定的本地用户组ID)insecure(允许客户端从大于1024的tcp/ip端口连接服务器)secure(限制客户端只能从小于1024的tcp/ip端口连接nfs服务器（默认设置）)wdelay(检查是否有相关的写操作，如果有则将这些写操作 一起执行，这样可以提高效率（默认设置))no_wdelay(若有写操作则立即执行，应与sync配合使用)subtree(若输出目录是一个子目录，则nfs服务器将检查其父目录的权限(默认设置))no_subtree(即使输出目录是一个子目录,nfs服务器也不检查其父目录的权限,这样可以提高效率) nfs开放文件共享，编辑文件/etc/exports文件，添加：/home/lixiaozhu/mount/small-file/share_file 192.168.1.0/24(rw,sync,no_root_squash,insecure,anonuid=1001)重新加载nfs共享配置12~ exportfs -rvexporting 192.168.1.107:/home/lixiaozhu/mount/small-file/share_file 客户端查看是否有可用的nfs共享：~ showmount -e 192.168.1.107 Client挂载将nfs服务端的文件挂载到本地mount -t nfs 192.168.1.107:/home/lixiaozhu/mount/small-file/share_file ~/Documents/share_server 挂载时常见错误Can’t mount from 192.168.1.107 onto /:Operation not permitted 防火墙端口有没有开放的，仅开放了客户端rpc api的部分，仅能查看分享，实际不能挂载。 rpc相关端口开放在1024以上，需要在/etc/exports配置insecure]]></content>
      <categories>
        <category>centos7</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos7</tag>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7使用firewalld防火墙]]></title>
    <url>%2F2018%2F01%2F11%2Fcentos7-firewall%2F</url>
    <content type="text"><![CDATA[centos7 firewalldfirewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念。 firewalld默认配置文件有两个：/usr/lib/firewalld/ （系统配置，尽量不要修改）和 /etc/firewalld/ （用户配置地址） Firewall Zone硬件防火墙默认一般有三个区，firewalld引入这一概念系统默认存在以下区域:drop：默认丢弃所有包block：拒绝所有外部连接，允许内部发起的连接public：指定外部连接可以进入external：dmz：和硬件防火墙一样，受限制的公共连接可以进入work：工作区，概念和workgoup一样，也是指定的外部连接允许home：类似家庭组internal：信任所有连接 配置firewalld123456添加端口,--permanent表示永久生效。不加该参数，下次启动就需要重新配置。~ firewall-cmd --zone=public --permanent --add-port=8080/tcp刷新防火墙配置~ firewall-cmd --reload查看开放端口~ firewall-cmd --list-ports 以Service的配置文件来配置Firewall1234在/etc/firewalld/services目录下添加nfs.xml文件后~ firewall-cmd --zone=public --permanent --add-service=nfs刷新配置~ firewall-cmd --reload 具体nfs.xml文件如下：123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;service&gt; &lt;short&gt;NFS4&lt;/short&gt; &lt;description&gt;The NFS4 protocol is used to share files via TCP networking. You will need to have the NFS tools installed and properly configure your NFS server for this option to be useful.&lt;/description&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;111&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;662&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;892&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;2049&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;32803&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;111&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;662&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;892&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;2049&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;32769&quot;/&gt;&lt;/service&gt; 如果是复杂服务需要开放多个端口的话，建议通过/etc/firewalld/services管理。建立一个common.xml的service用于管理所有简单端口服务。]]></content>
      <categories>
        <category>centos7</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7硬盘挂载]]></title>
    <url>%2F2018%2F01%2F11%2Fcentos7-mount%2F</url>
    <content type="text"><![CDATA[Centos7硬盘挂载按最初的设计，我有两块移动硬盘，2T的做媒体资源的nfs贡献，4T的做数据备份与日志备份。 2T因为已经有电影资源，因此不格式化硬盘，直接通过ntfs挂载，并设置nfs共享。 4T盘基本是空的，通过格式化成ext4格式。不设置文件共享。 格式化并挂载ext4硬盘：12345~ fdisk -l通过fdisk -l查询到要格式化的盘为/dev/sdb~ mkfs.ext4 /dev/sdb挂载sdb1分区到目录上~ mount /dev/sdb1 /home/lixiaozhu/mount/big-file/ ntfs硬盘挂载： 12345安装依赖：~ yum install ntfs-3g fuse -y~ fdisk -l通过fdisk -l查询到要挂载的盘为/dev/sdc1~ mount -t ntfs-3g /dev/sdc1 /home/lixiaozhu/mount/small-file]]></content>
      <categories>
        <category>centos7</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装Docker]]></title>
    <url>%2F2018%2F01%2F11%2Fdocker-install%2F</url>
    <content type="text"><![CDATA[docker简介docker是一个容器，将服务封装到docker image中，以container的形式启动。主要可以做到服务间的隔离，保证不会出现相互侵蚀的情况。 使用Docker有以下好处： 更高效的利用系统资源 更快速的启动时间 一致的运行环境 持续交付和部署 更轻松的迁移 更轻松的维护和扩展 对个人开发者来说，docker最明显的好处就是能快速搭建开发所需要的环境(kafka、mysql、redis等)。摆脱手动安装的困扰，需要的话docker pull一下，再不济build一个新镜像。 docker安装使用官方repo实在是太慢，这里借用阿里云的镜像123456789安装必须的系统工具~ sudo yum install -y yum-utils device-mapper-persistent-data lvm2添加yum源信息~ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo更新并安装docker-ce~ sudo yum makecache fast~ sudo yum -y install docker-ce启动Docker服务~ sudo service docker start 开启Docker加速我使用的是daocloud的加速器:https://www.daocloud.io/mirror#accelerator-doc. 12设置加速器，其实是修改的/etc/docker/deamon.json中的registry-mirrors属性~ sudo curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://加速器地址 安装docker-composepip install docker-compose docker-compose参考官方文档https://docs.docker.com/compose/]]></content>
      <categories>
        <category>centos7</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pyenv管理多版本python]]></title>
    <url>%2F2018%2F01%2F11%2Fpyenv-python-manager%2F</url>
    <content type="text"><![CDATA[pyenv是什么？centos7默认的python为2.7.9版本。而neovim需要3以上版本的python。而python的卸载、覆盖安装都是很麻烦，并且容易出错。可以通过pyenv简单搞定多版本管理。 pyenv是python版本管理工具，可以快速在命令行切换不同版本的python。 安装123456789101112将pyenv项目clone到~/.pyenv目录~ git clone https://github.com/pyenv/pyenv.git ~/.pyenv修改~/.bash_profile文件，添加以下内容~ vi ~/.bash_profileexport PYENV_ROOT=&quot;$HOME/.pyenv&quot;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then eval &quot;$(pyenv init -)&quot;fi刷新配置立即生效~ source ~/.bash_profile 使用pyenv在使用上非常简单，可以通过简单的命令快速切换版本，如下：123456789101112查看当前可以安装的Python版本~ pyenv install --list安装python~ pyenv install 3.6.4切换全局python版本为3.6.4~ pyenv global 3.6.4切换当前终端(shell)为3.6.4的python~ pyenv local 3.6.4查看当前使用的python版本~ pyenv version查看所有版本的python版本，带有*的为当前使用的版本~ pyenv versions pip使用国内镜像在~/.pip/pip.conf文件中添加或修改 12345[global]index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com 这里使用阿里云的镜像源 常见的问题通过pyenv install 3.6.4太慢了？可以通过预先下载好python的包到~/.pyenv/cache目录下，再调用pyenv命令进行安装。 123456pyenv默认是没有cache目录的，如果有cache目录直接cd就好~ make -p ~/.pyenv/cache &amp;&amp; cd ~/.pyenv/cache通过搜狐镜像下载python~ wget http://mirrors.sohu.com/python/3.6.4/Python-3.6.4.tar.xz可以看到直接跳过了下载的步骤，直接开始安装了~ pyenv install 3.6.4]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过aria2-with-webui使用aria2下载神器]]></title>
    <url>%2F2018%2F01%2F11%2Faria2%2F</url>
    <content type="text"><![CDATA[什么是aria2？aria2是一个轻量的支持多协议多源的命令行下载工具。它支持HTTP/HTTPS,FTP,SFTP,BitTorrent,Metalink。配合GUI工具和Chrome插件BaiduExporter、115下载助手，食用更美味。体验完超迅雷。 通过docker启动aria2先给centos安装一个docker。xujinkai/aria2-with-webui是一款集成了aria2、aria2-webui、apach服务的很优秀的一款镜像。docker使用123456789101112131415拉取镜像~ docker pull xujinkai/aria2-with-webui启动镜像~ sudo docker run -d \--name aria2-with-webui \-p 6800:6800 \-p 6880:80 \-p 6888:8080 \-v /DOWNLOAD_DIR:/data \-v /CONFIG_DIR:/conf \-e SECRET=YOUR_SECRET_CODE \xujinkai/aria2-with-webui可以看到docker需要3个端口，6800为aria2的rpc连接端口，8080为apache文件下载端口，80位aria2-webui端口。SECRET选项可以加强aria2的安全性。 配置docker-compose启动aria2123456789101112131415~ mkdir aria2~ nvim docker-compose.ymlversion: &apos;2&apos;services: aria2: image: xujinkai/aria2-with-webui:latest ports: - &quot;6800:6800&quot; - &quot;9100:80&quot; volumes: - &quot;/home/lixiaozhu/mount/small-file/share_server/Downloads:/data&quot; environment: - SECRET: xxxx~ docker-compose up -d 这里我使用了镜像默认的conf文件，不开放apache端口，这个目录我打算通过nfs开放共享。 遇到的问题进行bt下载时，新建bt任务容易出现file I/O error occurred问题，导致无法下载。我的原因是文件系统或者内核不支持aria2.conf中的file-allocation=falloc配置将file-allocation配置修改为none或者prealloc就正常了。附上配置简介,摘抄自https://aria2c.com/usage.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115## &apos;#&apos;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 #### 被注释的选项填写的是默认值, 建议在需要修改时再取消注释 #### 文件保存相关 ### 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置dir=~/downloads# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M#disk-cache=32M# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc# falloc和trunc则需要文件系统和内核支持# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项#file-allocation=none# 断点续传continue=true## 下载连接相关 ### 最大同时下载任务数, 运行时可修改, 默认:5#max-concurrent-downloads=5# 同一服务器连接数, 添加时可指定, 默认:1max-connection-per-server=5# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载min-split-size=10M# 单个任务最大线程数, 添加时可指定, 默认:5#split=5# 整体下载速度限制, 运行时可修改, 默认:0#max-overall-download-limit=0# 单个任务下载速度限制, 默认:0#max-download-limit=0# 整体上传速度限制, 运行时可修改, 默认:0#max-overall-upload-limit=0# 单个任务上传速度限制, 默认:0#max-upload-limit=0# 禁用IPv6, 默认:false#disable-ipv6=true# 连接超时时间, 默认:60#timeout=60# 最大重试次数, 设置为0表示不限制重试次数, 默认:5#max-tries=5# 设置重试等待的秒数, 默认:0#retry-wait=0## 进度保存相关 ### 从会话文件中读取下载任务input-file=/etc/aria2/aria2.session# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件save-session=/etc/aria2/aria2.session# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0#save-session-interval=60## RPC相关设置 ### 启用RPC, 默认:falseenable-rpc=true# 允许所有来源, 默认:falserpc-allow-origin-all=true# 允许非外部访问, 默认:falserpc-listen-all=true# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同#event-poll=select# RPC监听端口, 端口被占用时可以修改, 默认:6800#rpc-listen-port=6800# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项#rpc-secret=&lt;TOKEN&gt;# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-user=&lt;USER&gt;# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-passwd=&lt;PASSWD&gt;# 是否启用 RPC 服务的 SSL/TLS 加密,# 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接#rpc-secure=true# 在 RPC 服务中启用 SSL/TLS 加密时的证书文件,# 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥#rpc-certificate=/path/to/certificate.pem# 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件#rpc-private-key=/path/to/certificate.key## BT/PT下载相关 ### 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true#follow-torrent=true# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999listen-port=51413# 单个种子最大连接数, 默认:55#bt-max-peers=55# 打开DHT功能, PT需要禁用, 默认:trueenable-dht=false# 打开IPv6 DHT功能, PT需要禁用#enable-dht6=false# DHT网络监听端口, 默认:6881-6999#dht-listen-port=6881-6999# 本地节点查找, PT需要禁用, 默认:false#bt-enable-lpd=false# 种子交换, PT需要禁用, 默认:trueenable-peer-exchange=false# 每个种子限速, 对少种的PT很有用, 默认:50K#bt-request-peer-speed-limit=50K# 客户端伪装, PT需要peer-id-prefix=-TR2770-user-agent=Transmission/2.77# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0seed-ratio=0# 强制保存会话, 即使任务已经完成, 默认:false# 较新的版本开启后会在任务完成后依然保留.aria2文件#force-save=false# BT校验相关, 默认:true#bt-hash-check-seed=true# 继续之前的BT任务时, 无需再次校验, 默认:falsebt-seed-unverified=true# 保存磁力链接元数据为种子文件(.torrent文件), 默认:falsebt-save-metadata=true]]></content>
      <categories>
        <category>centos7</category>
      </categories>
      <tags>
        <tag>下载工具</tag>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+NexT搭建私人博客]]></title>
    <url>%2F2018%2F01%2F10%2FHexo%2BNexT-build-personal-blog%2F</url>
    <content type="text"><![CDATA[通过Hexo+Next和Github Pages搭建私人博客。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 NexT 是Hexo的一套漂亮精简的Theme，内集成第三方评论、RSS订阅、文章分类、文章标签、搜索等功能。 Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github上。 这是我阅读的hexo相关的博客 www.cduyzh.com、thief.one 准备工作 nodejs 环境，建议通过nvm安装。安装之后通过npm install yarn -g安装yarn包管理工具。 git和github账号。 名词解释： 站点目录 - 博客根目录 主题目录 - 站点目录下theme目录下具体的主题目录，如landscape。 站点配置文件 - 站点目录下的_config.yml 主题配置文件 - 主题目录下的_config.yml，配置主题信息 初始化hexo12345678# 创建博客目录~ mkdir bakka-blog &amp;&amp; cd bakka-blog# 安装hexo~ yarn global add hexo# 初始化博客~ hexo init# 启动hexo本地服务~ hexo s 通过hexo s命令启动之后，博客服务可以通过localhost:4000访问。初始化的博客会默认使用landscape主题。 关联博客与github在github上创建{accout}.github.io的仓库，{accout}为github用户名。此时可以访问{account}.github.io域名，得到404页面。我的仓库为sat1993.github.io，因此下面都以此为例。 修改博客目录下的_config.yml(站点配置文件)，将deploy节点下的type修改为git，并配置仓库信息。1234deploy: type: git repository: https://github.com/sat1993/sat1993.github.io.git branch: master 如果deploy.repository想要配置ssh协议，需要配置git信息。 部署服务到github上。12345678910# 安装hexo git部署插件。在站点目录下运行：~ yarn add hexo-deployer-git# 清空本地数据库~ hexo clean# 打包博客生成静态资源文件.~ hexo generate# 部署博客静态资源文件到github~ hexo deploy# 本地查看博客。服务为http://localhost:4000~ hexo server 部署完成后，可以通过sat1993.github.io访问到Hello World博文。 域名绑定通过sat1993.github.io访问实在是不雅。这里可以绑定自己的域名。但绑定自己的域名是无法设置https安全证书的。 域名解析：123记录类型： CNAME主机记录： 自定义域名记录值： sat1993.github.io hexo绑定CNAME文件。如果不添加该文件将一直跳转404页面。这也算是防止别人挂一个域名盗用博客。12# 进入站点目录。~ echo &quot;blog.bakka.site&quot; &gt; source/CNAME 通过hexo g和hexo d之后，便可以通过自己的域名访问服务了。 发布第一篇博文通过hexo new my-first-blog可以初始化第一篇博文到站点目录/source/_posts下。123456---title: my-first-blogdate: 2018-01-10 20:01:34tags:categories:--- 在---后编写博文，通过hexo s启动服务，访问http://localhost:4000/2018/01/10/my-first-blog 。确认博客无误之后，通过hexo g和hexo d部署发布博文。通过http://blog.bakka.site/2018/01/10/my-first-blog 访问正式的博文。 如果要删除博文，直接删除站点目录/source/_posts/my-first-blog.md再通过hexo g &amp;&amp; hexo d部署到github上就ok了。 博文起始字段含义: title 文章的标题 date 创建日期 （文件的创建日期 ） updated 修改日期 （ 文件的修改日期） comments 是否开启评论 true，默认为false tags 标签 categories 分类 permalink url中的名字（文件名） 博文备份hexo是通过本地解析将站点目录/source/_posts/下的md文件解析成html文件,保存在public目录下。其他的静态资源也会保存在站点目录/public下。如果不小心丢失本地的站点目录，将会导致无法更新博客。 在站点目录下通过git init构建git仓库。通过github创建仓库。修改.git/config,在文件结尾添加。123456[remote &quot;origin&quot;] url = 创建的git仓库地址。 fetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;] remote = origin merge = refs/heads/master 因为本地已有.gitignore文件。因此我是没有修改.gitignore的。若不存在该文件，则修改成如下内容。123456789101112.DS_Store# 数据库文件Thumbs.dbdb.json# 日志文件*.log# 依赖文件，可以通过yarn安装回来node_modules/# 打包后的静态资源，可通过hexo g打包public/# 部署的临时文件.deploy*/ 通过git命令上传仓库。 上传主题仓库上传站点目录时，我们发现主题所在仓库是无法上传到git上的。因为我们的主题目录本身也是git clone下来的。 这里可以通过删除主题仓库的git相关文件(不建议)：1~ rm -rf .git* 或者fork https://github.com/iissnan/hexo-theme-next作为自己的一个主题仓库。修改.git/config文件：12345678910111213[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true[remote &quot;origin&quot;] url = fork的主题仓库地址 fetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;] remote = origin merge = refs/heads/master 上传我们的主题改动。将该仓库作为我们独有改动过的仓库。 虽然这样导致我们会有2个git仓库存我们的博客代码，但是分站点、主题两个部分去维护，也是可以的。 站点配置配置站点基本信息，如语言、作者、标题等。 站点基础配置修改站点配置文件_config.yml，修改# Site下的配置：12345678910111213# Site# 标题title: Bakka&apos;s Blog# 子标题subtitle:# 站点描述description:# 作者信息，主要展示于footer上author: 进击的马鹿# 修改首页语言，默认为英语language: zh-Hans# 修改时区timezone: 这里主要修改title、author、language三个属性。 配置主题为NexT到站点目录，克隆主题到主题目录：12# 克隆NexT项目到themes/next目录下~ git clone https://github.com/iissnan/hexo-theme-next.git themes/next 修改站点配置文件_config.yml当前主题为next(themes目录下的主题目录名) 1theme: next 运行hexo g &amp;&amp; hexo d生成静态文件并发布。 NexT 官方文档 站点404页面设置腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！效果如下 http://www.ixirong.com/404.html 使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下： 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt; &lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 配置默认博文模板修改站点目录下scaffolds/post.md文件，修改为： 12345678---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;updated: &#123;&#123; date &#125;&#125;tags:categories:comments: true--- 这样每次hexo new blog的时候，都会带有这些起始字段。 博文压缩在站点目录下执行： 1234# 安装gulp工具命令~ yarn global add gulp# 安装gulp与gulp压缩插件~ yarn add gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp 在站点根目录下新建gulpfile.js，并填入以下内容: 123456789101112131415161718192021222324252627282930313233var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);// 压缩 public 目录 cssgulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩 public 目录 htmlgulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩 public/js 目录 jsgulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src(&apos;./public/**/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 执行 gulp 命令时执行的任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;]); 之后可以通过hexo g &amp;&amp; gulp来生成静态资源并压缩了。 添加搜索功能安装hexo-generator-searchdb,在站点目录下执行：1yarn add hexo-generator-searchdb 编辑站点配置文件_config.yml，添加以下内容:12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件_config.yml，启用本地搜索功能：123# Local searchlocal_search: enable: true 主题配置主要配置主题的基本信息，标签、菜单、CopyRight等。 修改网站页签图标修改主题配置文件_config.yml，在favicon字段中修改small、medium:123favicon: small: /images/favicon-16x16.png medium: /images/favicon-32x32.png 将自己的图标(16x16、32x32)放置到主题目录的source/images目录下。12~ mv my-16x16-icon.png theme/next/source/images/favicon-16x16.png~ mv my-32x32-icon.png theme/next/source/images/favicon-32x32.png 刷新服务即可。 设置首页不显示全文修改主题配置文件_config.yml,将auto_excerpt.enable设置为true： 12345# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150 菜单管理修改主题配置文件_config.yml，在menu字段中添加字段：1234menu: home: / about: /about ... 修改主题目录下的languages/zh-Hans.yml文件,更新中文展示：1234menu: host: 首页 about: 关于马鹿 ... 最后在主题目录下的source目录下创建about目录，并放入index.html文件即可。 添加标签、分类菜单添加标签菜单修改主题配置文件，添加menu.tags: /tags/ || tags。12menu: tags: /tags/ || tags 定位到站点目录下，使用hexo新建一个页面tags:1hexo new page tags 编辑刚刚生成的页面(source/tags/index.md)，将页面类型设置为tags:123456---title: 标签date: 2018-01-10 23:11:01type: &quot;tags&quot;comments: false--- 可以通过comments参数开启评论. 添加分类菜单修改主题配置文件，添加menu.categories: /categories/ || th12menu: categories: /categories/ || th 定位到站点目录下，使用hexo新建一个页面categories:1hexo new page categories 编辑刚刚生成的页面(source/categories/index.md)，将页面类型设置为categories:123456---title: 分类date: 2018-01-10 23:11:43type: &quot;categories&quot;comments: false--- 可以通过comments参数开启评论 设置完毕后通过hexo g&amp;&amp; hexo s快速查看效果。 修改js、css CDN配置通过修改主题的固定js、css到公开静态资源仓库，降低github的流量访问，提升读客访问博文。 这里推荐使用Staticfile CDN 修改主题配置文件_config.yml: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152vendors: # Internal path prefix. Please do not edit it. _internal: vendors # Internal version: 2.1.3 jquery: https://cdn.staticfile.org/jquery/2.1.3/jquery.min.js # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: https://cdn.staticfile.org/fancybox/2.1.5/jquery.fancybox.pack.js fancybox_css: https://cdn.staticfile.org/fancybox/2.1.5/jquery.fancybox.min.css # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: https://cdn.staticfile.org/fastclick/1.0.6/fastclick.min.js # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: https://cdn.staticfile.org/jquery_lazyload/1.9.7/jquery.lazyload.min.js # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: https://cdn.staticfile.org/velocity/1.2.1/velocity.min.js # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: https://cdn.staticfile.org/velocity/1.2.1/velocity.ui.min.js # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: https://cdn.staticfile.org/UAParser.js/0.7.9/ua-parser.min.js # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: https://cdn.staticfile.org/font-awesome/4.6.2/css/font-awesome.min.css # Internal version: 1 # https://www.algolia.com algolia_instant_js: algolia_instant_css: # Internal version: 1.0.2 # See: https://github.com/HubSpot/pace # Or use direct links below: # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css pace: https://cdn.staticfile.org/pace/1.0.2/pace.min.js pace_css: https://cdn.staticfile.org/pace/1.0.2/themes/blue/pace-theme-flash.min.css # Internal version: 1.0.0 # https://github.com/hustcc/canvas-nest.js canvas_nest: https://cdn.staticfile.org/canvas-nest.js/1.0.0/canvas-nest.min.js 注释的部分是当前版本的NexT所使用的版本。建议引用的CDN版本一定要一直。修改完成后，通过hexo s预览下效果。 添加顶部加载条修改主题目录下的layout/_custom/header.swig文件，添加如下内容：123456789101112131415&lt;script src=&quot;https://cdn.staticfile.org/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;https://cdn.staticfile.org/pace/1.0.2/themes/blue/pace-theme-flash.min.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;style&gt; .pace .pace-progress &#123; background: #1E92FB; /*进度条颜色*/ height: 3px; &#125; .pace .pace-progress-inner &#123; box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/ &#125; .pace .pace-activity &#123; border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/ &#125;&lt;/style&gt; 通过hexo s运行本地服务访问首页就可以看到效果了。 隐藏网页地步Powered By信息修改主题配置文件_config.yml。修改footer.powered、footer.theme.enable和footer.theme.version为false：12345678910footer: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false 添加来必力评论登陆来必力,点击右上角头像-&gt;管理页面-&gt;安装Free版本。填入站点信息之后，将会获得如下代码：123456789101112131415161718&lt;!-- 来必力City版安装代码 --&gt;&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;xxxx&quot;&gt;&lt;script type=&quot;text/javascript&quot;&gt; (function(d, s) &#123; var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125; j = d.createElement(s); j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;; j.async = true; e.parentNode.insertBefore(j, e); &#125;)(document, &apos;script&apos;);&lt;/script&gt;&lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;&lt;/div&gt;&lt;!-- City版安装代码已完成 --&gt; 其中第一行div标签的data-uid属性复制出来。填入到主题配置文件的livere_uid属性中：1livere_uid: xxxx 在hexo g &amp;&amp; hexo s之后即可看到文章最下方的评论。 添加访问统计登陆百度统计，添加网站后，获取到如下代码:123456789&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?xxxxx&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt; 获取hm.js?后的统计Idxxxxx将其填入主题配置文件_config.yml中1baidu_analytics: xxxxx 在hexo g &amp;&amp; gulp &amp;&amp; hexo s之后即可添加百度统计。hexo d之后即可在百度分析后台看到数据了。]]></content>
      <categories>
        <category>手记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
        <tag>私人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装centos7操作系统]]></title>
    <url>%2F2018%2F01%2F10%2Fcentos7-install%2F</url>
    <content type="text"><![CDATA[服务器简介最初在3月份的时候折腾过服务器。当时配置是 机械键盘500G 7年使用龄 海盗船笔记本内存8G G3460 cpu 华硕H81T主板 在12月24日进行了硬件升级，主要原因还是因为我准备构建服务，担心我家的硬盘给我整崩了。还有一个原因是双十一的时候800购买了3年的虚拟机，有了一个公网ip，可以对外服务了。 基于以上原因，升级了一下配置 镁光MX200固态硬盘256G 2年使用龄.不过因为笔记本一直吃灰，就从笔记本上扣了下来。 海盗船笔记本内存16G 笔记本的内存、硬盘都被我扣了。彻底报废，cpu针脚不对，不然i5双核的cpu也能用。 G3460 cpu cpu成大短板，不过没事，再短没有我家方正100M带宽短。 华硕H81T主板 主板棒棒哒。服务器退休以后还可以升级下部件做一体机，倒不如说现在就可以逛贴吧。 debian9.3.0系统在3月份的时候机器已经有centos7 1611系统，不过把硬盘干了也得重来。debian相比centos7依赖库新、多，系统本身轻量稳定。内核为4.x.x。python 3.x版本但是离线安装版没有gcc、make等。无法安装网卡。离线安装gcc，但相关的deb包有40个以上。直接放弃。 centos7 1708系统原机械硬盘安装的是1611版本，也算是升级了一下。centos7相对而言比较稳定，但存在yum库老旧，大多数依赖需要手动配置yum源，如docker。甚至也有需要单独安装的git。系统自带的python也是2.7.9版本。但相对debian，初始安装时勾选development Envirment，会带有gcc、make等工具。几乎一键安装网卡驱动。前提是先升级内核。。内核版本3.10.0，r8168驱动需要4.7以上内核。 安装的时候遇到的问题：选取install CentOS7或者 Test this media &amp; install CentOS 7 直接黑屏?上网查询之后发现是机器没有图形卡或者图形卡驱动不匹配导致的。这里选择第三个选项Troubleshooting。再选择Install CentOS7 in basic graphics mode此选项允许您在图形模式下安装CentOS的，即使安装程序无法加载正确的驱动程序为您的视频卡。如果你的屏幕会出现扭曲或使用安装CentOS选项时一片空白。 参考链接：http://www.cnblogs.com/yllinux/p/7238630.html 安装完成之后没有gcc，无法安装网卡驱动?依据之前1611安装经验，在miniInstall中需要勾选Development Envirment安装基础的开发工具，这样会带有gcc、make等工具。 内核升级因为电脑没有网络，需要离线安装内核。 下载制定版本的kernel、kernel-devel 下载其中的kernel-ml-devel-4.14.8-1.el7.elrepo.x86_64.rpm、kernel-ml-4.14.8-1.el7.elrepo.x86_64.rpm。 12~ yum -y install kernel-ml-devel-4.14.8-1.el7.elrepo.x86_64.rpm~ yum -y install kernel-ml-4.14.8-1.el7.elrepo.x86_64.rpm 在内核安装完成之后还需要修改内核的启动顺序。 修改grub中默认的内核版本运行~ grub2-editenv list,查看当前默认启动内核。 查看所有内核：~ cat /boot/grub2/grub.cfg | grep menuentry 复制第一个单词menuentry 后面单引号包裹的内核型号。与grub2-editenv list运行的结果saved_entry=是一样的。 修改最新的内核为默认启动：~ grub2-set-default &#39;Red Hat Enterprise Linux Server (4.4.0) 7.2 (Maipo)&#39; 最后调用~ grub2-editenv list查看是否更新默认启动的内核。 参考链接：http://www.voidcn.com/article/p-oojnbemz-bqr.html 安装网卡驱动123456解压0010-r8168-8.045.08.tar.bz2:~ bzip 0010-r8168-8.045.08.tar.bz2~ tar -xvf 0010-r8168-8.045.08.tar安装网卡驱动~ cd r8168-8.045.08~ sh autorun.sh 安装完成之后插上网线就可以看到有黄灯闪烁。 至此机器可以直接插网线到路由器上，通过ssh进行操作。 切换yum源为阿里云镜像源有了网卡第一件事就是切换yum源，家里的破网实在蛋疼。curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo之后运行yum makecache生成缓存，切换完成~]]></content>
      <categories>
        <category>centos7</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
</search>
